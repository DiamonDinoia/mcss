<?xml version="1.0" encoding="UTF-8" ?>
<Graph version="2020.2" pxg_version="2" maxfile_name="rng" design_name="rngKernel" compilation_phase="original" frequency="0.00">
	<Node criticalPaths="[]" group="[]" id="151" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantRawBits">
		<Output latency="0" name="value" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1</Value>
		<HexValue>0x1</HexValue>
		<NumericValue>1.0</NumericValue>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="154" dst_node_input="a" src_node_id="151" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="152" isControl="true" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeInputMappedReg">
		<Output latency="0" name="io_y_force_disabled" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>Scalar input (io_y_force_disabled)</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Name>io_y_force_disabled</Name>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="153" dst_node_input="a" src_node_id="152" src_node_output="io_y_force_disabled" />
	<Node criticalPaths="[]" group="[]" id="153" isControl="true" isVisible="false" pipelineFactor="0.0" powerUsage="N/A" type="NodeNot">
		<Input name="a" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>~</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="154" dst_node_input="b" src_node_id="153" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="154" isControl="false" isVisible="false" pipelineFactor="0.0" powerUsage="N/A" type="NodeAnd">
		<Input name="a" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>&amp;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="1" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="155" dst_node_input="output_control" src_node_id="154" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="1" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>1.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:385)
maxpower.kernel.random.MersenneTwister.createCounter(MersenneTwister.maxj:213)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:198)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="3" dst_node_input="enable" src_node_id="1" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="2" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>624.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:385)
maxpower.kernel.random.MersenneTwister.createCounter(MersenneTwister.maxj:213)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:198)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>624.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="3" dst_node_input="max" src_node_id="2" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="3" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCounter">
		<Input name="enable" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="max" type="dfeOffsetFix(11, 0, UNSIGNED)" />
		<Output latency="0" name="count" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="0" name="wrap" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0</Text>
		<ResourceUsage DSPs="0" FFs="10" FMems="0" LUTs="10" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:385)
maxpower.kernel.random.MersenneTwister.createCounter(MersenneTwister.maxj:213)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:198)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Increment>1</Increment>
		<WrapValue>0</WrapValue>
		<InitValue>0</InitValue>
		<CountMode>NUMERIC_INCREMENTING</CountMode>
		<WrapMode>STOP_AT_MAX</WrapMode>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="4" dst_node_input="i" src_node_id="3" src_node_output="count" />
	<Edge criticalPaths="[]" dst_node_id="6" dst_node_input="i" src_node_id="3" src_node_output="count" />
	<Edge criticalPaths="[]" dst_node_id="8" dst_node_input="i" src_node_id="3" src_node_output="count" />
	<Edge criticalPaths="[]" dst_node_id="11" dst_node_input="a" src_node_id="3" src_node_output="count" />
	<Node criticalPaths="[]" group="[]" id="10" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>624.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:810)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:242)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>624.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="11" dst_node_input="b" src_node_id="10" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="11" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeGte">
		<Input name="a" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>&gt;=</Text>
		<ResourceUsage DSPs="0" FFs="1" FMems="0" LUTs="2" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:810)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:242)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="15" dst_node_input="sel" src_node_id="11" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="16" dst_node_input="sel" src_node_id="11" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="17" dst_node_input="sel" src_node_id="11" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="8" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="0" name="o" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Text>NodeCast
{HWOffsetFix:10, 0, UNSIGNED} 
-&gt;
 {HWOffsetFix:10, 0, UNSIGNED}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:181)
maxpower.kernel.random.MersenneTwister.createRom(MersenneTwister.maxj:221)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:202)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="9" dst_node_input="addra" src_node_id="8" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="9" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMappedRom">
		<Input name="addra" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="2" name="dataa" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MappedRom 'rngKernelgen_seeds2':\n{HWOffsetFix:32, 0, UNSIGNED} x 624</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="1" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.romMapped(Mem.java:919)
maxpower.kernel.random.MersenneTwister.createRom(MersenneTwister.maxj:221)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:202)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Name>rngKernelgen_seeds2</Name>
		<Depth>624</Depth>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="17" dst_node_input="option0" src_node_id="9" src_node_output="dataa" />
	<Node criticalPaths="[]" group="[]" id="83" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="397" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: 397</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:272)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="123" dst_node_input="a" src_node_id="83" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="86" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(1)" />
		<Text>[31:31]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>31</Base>
		<Width>1</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="92" dst_node_input="in0" src_node_id="86" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="80" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: 1</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:271)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="89" dst_node_input="a" src_node_id="80" src_node_output="output" />
	<Edge criticalPaths="[]" dst_node_id="115" dst_node_input="a" src_node_id="80" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="89" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(31)" />
		<Text>[30:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>31</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="92" dst_node_input="in1" src_node_id="89" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="92" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(1)" />
		<Input name="in1" type="dfeBits(31)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.cat(DFEVectorBase.java:375)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="96" dst_node_input="input" src_node_id="92" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="96" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="97" dst_node_input="in0" src_node_id="96" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="6" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="0" name="o" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Text>NodeCast
{HWOffsetFix:10, 0, UNSIGNED} 
-&gt;
 {HWOffsetFix:10, 0, UNSIGNED}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:181)
maxpower.kernel.random.MersenneTwister.createRom(MersenneTwister.maxj:221)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:202)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="7" dst_node_input="addra" src_node_id="6" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="7" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMappedRom">
		<Input name="addra" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="2" name="dataa" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MappedRom 'rngKernelgen_seeds1':\n{HWOffsetFix:32, 0, UNSIGNED} x 624</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="1" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.romMapped(Mem.java:919)
maxpower.kernel.random.MersenneTwister.createRom(MersenneTwister.maxj:221)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:202)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Name>rngKernelgen_seeds1</Name>
		<Depth>624</Depth>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="16" dst_node_input="option0" src_node_id="7" src_node_output="dataa" />
	<Node criticalPaths="[]" group="[]" id="82" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="397" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: 397</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:272)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="122" dst_node_input="a" src_node_id="82" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="100" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeBits(96)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>[63:32]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>32</Base>
		<Width>32</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="101" dst_node_input="input" src_node_id="100" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="101" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="108" dst_node_input="datain" src_node_id="101" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="107" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>1.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="108" dst_node_input="shift" src_node_id="107" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="108" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Output latency="1" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="109" dst_node_input="input" src_node_id="108" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="109" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="122" dst_node_input="b" src_node_id="109" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="122" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:285)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="125" dst_node_input="a" src_node_id="122" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="79" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: 1</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:271)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="88" dst_node_input="a" src_node_id="79" src_node_output="output" />
	<Edge criticalPaths="[]" dst_node_id="114" dst_node_input="a" src_node_id="79" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="114" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(1)" />
		<Text>[0:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:280)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>1</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="119" dst_node_input="sel" src_node_id="114" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="116" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantRawBits">
		<Output latency="0" name="value" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.vect(Constant.java:136)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:281)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>00000000000000000000000000000000</Value>
		<HexValue>0x00000000</HexValue>
		<NumericValue>0.0</NumericValue>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="118" dst_node_input="option0" src_node_id="116" src_node_output="value" />
	<Edge criticalPaths="[]" dst_node_id="119" dst_node_input="option0" src_node_id="116" src_node_output="value" />
	<Edge criticalPaths="[]" dst_node_id="120" dst_node_input="option0" src_node_id="116" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="117" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>2.567483615E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.vect(Constant.java:120)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:282)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>2.567483615E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="118" dst_node_input="option1" src_node_id="117" src_node_output="value" />
	<Edge criticalPaths="[]" dst_node_id="119" dst_node_input="option1" src_node_id="117" src_node_output="value" />
	<Edge criticalPaths="[]" dst_node_id="120" dst_node_input="option1" src_node_id="117" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="119" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMux">
		<Input name="sel" type="dfeBits(1)" />
		<Input name="option0" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="option1" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MUX</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:100)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:280)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="125" dst_node_input="b" src_node_id="119" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="125" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:285)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="13" dst_node_input="input" src_node_id="125" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="13" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="-624" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: -624</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:248)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="16" dst_node_input="option1" src_node_id="13" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="16" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMux">
		<Input name="sel" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="option0" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="option1" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MUX</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:100)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:247)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="22" dst_node_input="datain" src_node_id="16" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="28" dst_node_input="a" src_node_id="16" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="79" dst_node_input="input" src_node_id="16" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="82" dst_node_input="input" src_node_id="16" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="85" dst_node_input="a" src_node_id="16" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="85" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(1)" />
		<Text>[31:31]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>31</Base>
		<Width>1</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="91" dst_node_input="in0" src_node_id="85" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="88" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(31)" />
		<Text>[30:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>31</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="91" dst_node_input="in1" src_node_id="88" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="91" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(1)" />
		<Input name="in1" type="dfeBits(31)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.cat(DFEVectorBase.java:375)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="94" dst_node_input="input" src_node_id="91" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="94" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="95" dst_node_input="in0" src_node_id="94" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="4" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="0" name="o" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Text>NodeCast
{HWOffsetFix:10, 0, UNSIGNED} 
-&gt;
 {HWOffsetFix:10, 0, UNSIGNED}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:181)
maxpower.kernel.random.MersenneTwister.createRom(MersenneTwister.maxj:221)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:202)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="5" dst_node_input="addra" src_node_id="4" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="5" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMappedRom">
		<Input name="addra" type="dfeOffsetFix(10, 0, UNSIGNED)" />
		<Output latency="2" name="dataa" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MappedRom 'rngKernelgen_seeds0':\n{HWOffsetFix:32, 0, UNSIGNED} x 624</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="1" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.romMapped(Mem.java:919)
maxpower.kernel.random.MersenneTwister.createRom(MersenneTwister.maxj:221)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:202)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Name>rngKernelgen_seeds0</Name>
		<Depth>624</Depth>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="15" dst_node_input="option0" src_node_id="5" src_node_output="dataa" />
	<Node criticalPaths="[]" group="[]" id="81" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="397" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: 397</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:272)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="121" dst_node_input="a" src_node_id="81" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="98" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeBits(96)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>[31:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>32</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="99" dst_node_input="input" src_node_id="98" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="99" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="105" dst_node_input="datain" src_node_id="99" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="104" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>1.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="105" dst_node_input="shift" src_node_id="104" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="105" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Output latency="1" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="106" dst_node_input="input" src_node_id="105" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="106" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="121" dst_node_input="b" src_node_id="106" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="121" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:285)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="124" dst_node_input="a" src_node_id="121" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="78" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: 1</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:271)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="87" dst_node_input="a" src_node_id="78" src_node_output="output" />
	<Edge criticalPaths="[]" dst_node_id="113" dst_node_input="a" src_node_id="78" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="113" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(1)" />
		<Text>[0:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:280)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>1</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="118" dst_node_input="sel" src_node_id="113" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="118" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMux">
		<Input name="sel" type="dfeBits(1)" />
		<Input name="option0" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="option1" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MUX</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:100)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:280)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="124" dst_node_input="b" src_node_id="118" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="124" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:285)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="12" dst_node_input="input" src_node_id="124" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="12" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="-624" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: -624</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:248)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="15" dst_node_input="option1" src_node_id="12" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="15" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMux">
		<Input name="sel" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="option0" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="option1" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MUX</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:100)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:247)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="19" dst_node_input="datain" src_node_id="15" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="27" dst_node_input="a" src_node_id="15" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="78" dst_node_input="input" src_node_id="15" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="81" dst_node_input="input" src_node_id="15" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="84" dst_node_input="a" src_node_id="15" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="84" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(1)" />
		<Text>[31:31]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>31</Base>
		<Width>1</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="90" dst_node_input="in0" src_node_id="84" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="87" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(31)" />
		<Text>[30:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>31</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="90" dst_node_input="in1" src_node_id="87" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="90" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(1)" />
		<Input name="in1" type="dfeBits(31)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.cat(DFEVectorBase.java:375)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:275)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="93" dst_node_input="input" src_node_id="90" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="93" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="95" dst_node_input="in1" src_node_id="93" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="95" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(32)" />
		<Input name="in1" type="dfeBits(32)" />
		<Output latency="0" name="result" type="dfeBits(64)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="97" dst_node_input="in1" src_node_id="95" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="97" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(32)" />
		<Input name="in1" type="dfeBits(64)" />
		<Output latency="0" name="result" type="dfeBits(96)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="98" dst_node_input="a" src_node_id="97" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="100" dst_node_input="a" src_node_id="97" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="102" dst_node_input="a" src_node_id="97" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="102" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeBits(96)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>[95:64]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>64</Base>
		<Width>32</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="103" dst_node_input="input" src_node_id="102" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="103" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="111" dst_node_input="datain" src_node_id="103" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="110" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>1.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="111" dst_node_input="shift" src_node_id="110" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="111" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Output latency="1" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="112" dst_node_input="input" src_node_id="111" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="112" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:276)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="123" dst_node_input="b" src_node_id="112" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="123" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:285)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="126" dst_node_input="a" src_node_id="123" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="115" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="result" type="dfeBits(1)" />
		<Text>[0:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.slice(DFEVectorBase.java:997)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:280)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>1</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="120" dst_node_input="sel" src_node_id="115" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="120" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMux">
		<Input name="sel" type="dfeBits(1)" />
		<Input name="option0" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="option1" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MUX</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:100)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:280)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="126" dst_node_input="b" src_node_id="120" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="126" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:285)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="14" dst_node_input="input" src_node_id="126" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="14" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="-624" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>stream offset: -624</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:248)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="17" dst_node_input="option1" src_node_id="14" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="17" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeMux">
		<Input name="sel" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="option0" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="option1" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>MUX</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Control.mux(Control.java:100)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:247)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="25" dst_node_input="datain" src_node_id="17" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="29" dst_node_input="a" src_node_id="17" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="80" dst_node_input="input" src_node_id="17" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="83" dst_node_input="input" src_node_id="17" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="86" dst_node_input="a" src_node_id="17" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="24" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>11.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>11.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="25" dst_node_input="shift" src_node_id="24" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="25" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(4, 0, UNSIGNED)" />
		<Output latency="3" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="26" dst_node_input="input" src_node_id="25" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="26" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="29" dst_node_input="b" src_node_id="26" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="29" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="37" dst_node_input="datain" src_node_id="29" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="47" dst_node_input="a" src_node_id="29" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="36" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>7.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>7.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="37" dst_node_input="shift" src_node_id="36" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="37" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(3, 0, UNSIGNED)" />
		<Output latency="2" name="dataout" type="dfeBits(32)" />
		<Text>&lt;&lt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Left</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="38" dst_node_input="input" src_node_id="37" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="38" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="44" dst_node_input="a" src_node_id="38" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="43" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>2.63692864E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>2.63692864E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="44" dst_node_input="b" src_node_id="43" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="44" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeAnd">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&amp;</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="47" dst_node_input="b" src_node_id="44" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="47" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="55" dst_node_input="datain" src_node_id="47" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="65" dst_node_input="a" src_node_id="47" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="54" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>15.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>15.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="55" dst_node_input="shift" src_node_id="54" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="55" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(4, 0, UNSIGNED)" />
		<Output latency="3" name="dataout" type="dfeBits(32)" />
		<Text>&lt;&lt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Left</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="56" dst_node_input="input" src_node_id="55" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="56" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="62" dst_node_input="a" src_node_id="56" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="61" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>4.022730752E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>4.022730752E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="62" dst_node_input="b" src_node_id="61" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="62" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeAnd">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&amp;</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="65" dst_node_input="b" src_node_id="62" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="65" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="73" dst_node_input="datain" src_node_id="65" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="77" dst_node_input="a" src_node_id="65" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="72" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>18.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>18.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="73" dst_node_input="shift" src_node_id="72" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="73" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(5, 0, UNSIGNED)" />
		<Output latency="4" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="74" dst_node_input="input" src_node_id="73" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="74" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="77" dst_node_input="b" src_node_id="74" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="77" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="130" dst_node_input="input" src_node_id="77" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="130" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="131" dst_node_input="in0" src_node_id="130" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="21" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>11.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>11.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="22" dst_node_input="shift" src_node_id="21" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="22" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(4, 0, UNSIGNED)" />
		<Output latency="3" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="23" dst_node_input="input" src_node_id="22" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="23" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="28" dst_node_input="b" src_node_id="23" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="28" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="34" dst_node_input="datain" src_node_id="28" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="46" dst_node_input="a" src_node_id="28" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="33" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>7.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>7.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="34" dst_node_input="shift" src_node_id="33" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="34" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(3, 0, UNSIGNED)" />
		<Output latency="2" name="dataout" type="dfeBits(32)" />
		<Text>&lt;&lt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Left</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="35" dst_node_input="input" src_node_id="34" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="35" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="42" dst_node_input="a" src_node_id="35" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="41" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>2.63692864E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>2.63692864E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="42" dst_node_input="b" src_node_id="41" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="42" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeAnd">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&amp;</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="46" dst_node_input="b" src_node_id="42" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="46" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="52" dst_node_input="datain" src_node_id="46" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="64" dst_node_input="a" src_node_id="46" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="51" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>15.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>15.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="52" dst_node_input="shift" src_node_id="51" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="52" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(4, 0, UNSIGNED)" />
		<Output latency="3" name="dataout" type="dfeBits(32)" />
		<Text>&lt;&lt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Left</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="53" dst_node_input="input" src_node_id="52" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="53" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="60" dst_node_input="a" src_node_id="53" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="59" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>4.022730752E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>4.022730752E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="60" dst_node_input="b" src_node_id="59" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="60" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeAnd">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&amp;</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="64" dst_node_input="b" src_node_id="60" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="64" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="70" dst_node_input="datain" src_node_id="64" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="76" dst_node_input="a" src_node_id="64" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="69" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>18.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>18.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="70" dst_node_input="shift" src_node_id="69" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="70" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(5, 0, UNSIGNED)" />
		<Output latency="4" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="71" dst_node_input="input" src_node_id="70" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="71" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="76" dst_node_input="b" src_node_id="71" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="76" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="128" dst_node_input="input" src_node_id="76" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="128" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="129" dst_node_input="in0" src_node_id="128" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="18" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>11.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>11.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="19" dst_node_input="shift" src_node_id="18" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="19" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(4, 0, UNSIGNED)" />
		<Output latency="3" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="20" dst_node_input="input" src_node_id="19" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="20" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="27" dst_node_input="b" src_node_id="20" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="27" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:257)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="31" dst_node_input="datain" src_node_id="27" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="45" dst_node_input="a" src_node_id="27" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="30" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>7.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>7.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="31" dst_node_input="shift" src_node_id="30" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="31" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(3, 0, UNSIGNED)" />
		<Output latency="2" name="dataout" type="dfeBits(32)" />
		<Text>&lt;&lt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Left</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="32" dst_node_input="input" src_node_id="31" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="32" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="40" dst_node_input="a" src_node_id="32" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="39" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>2.63692864E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>2.63692864E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="40" dst_node_input="b" src_node_id="39" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="40" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeAnd">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&amp;</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="45" dst_node_input="b" src_node_id="40" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="45" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:258)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="49" dst_node_input="datain" src_node_id="45" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="63" dst_node_input="a" src_node_id="45" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="48" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>15.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>15.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="49" dst_node_input="shift" src_node_id="48" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="49" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(4, 0, UNSIGNED)" />
		<Output latency="3" name="dataout" type="dfeBits(32)" />
		<Text>&lt;&lt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Left</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="50" dst_node_input="input" src_node_id="49" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="50" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftLeft(DFEVectorBase.java:1098)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="58" dst_node_input="a" src_node_id="50" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="57" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>4.022730752E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>4.022730752E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="58" dst_node_input="b" src_node_id="57" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="58" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeAnd">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&amp;</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.and(DFEVectorBase.java:1237)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="63" dst_node_input="b" src_node_id="58" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="63" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:259)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="67" dst_node_input="datain" src_node_id="63" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="75" dst_node_input="a" src_node_id="63" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="66" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>18.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>18.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="67" dst_node_input="shift" src_node_id="66" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="67" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeShift">
		<Input name="datain" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="shift" type="dfeOffsetFix(5, 0, UNSIGNED)" />
		<Output latency="4" name="dataout" type="dfeBits(32)" />
		<Text>&gt;&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Direction>Right</Direction>
		<Circular>false</Circular>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="68" dst_node_input="input" src_node_id="67" src_node_output="dataout" />
	<Node criticalPaths="[]" group="[]" id="68" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.shiftRight(DFEVectorBase.java:1123)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="75" dst_node_input="b" src_node_id="68" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="75" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeXor">
		<Input name="a" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Input name="b" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="1" name="result" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>^</Text>
		<ResourceUsage DSPs="0" FFs="32" FMems="0" LUTs="32" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.xor(DFEVectorBase.java:1064)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:260)
maxpower.kernel.random.MersenneTwister.build(MersenneTwister.maxj:206)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="127" dst_node_input="input" src_node_id="75" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="127" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="129" dst_node_input="in1" src_node_id="127" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="129" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(32)" />
		<Input name="in1" type="dfeBits(32)" />
		<Output latency="0" name="result" type="dfeBits(64)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="131" dst_node_input="in1" src_node_id="129" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="131" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(32)" />
		<Input name="in1" type="dfeBits(64)" />
		<Output latency="0" name="result" type="dfeBits(96)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:207)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="132" dst_node_input="a" src_node_id="131" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="132" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeBits(96)" />
		<Output latency="0" name="result" type="dfeBits(96)" />
		<Text>[95:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:344)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>96</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="133" dst_node_input="a" src_node_id="132" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="135" dst_node_input="a" src_node_id="132" src_node_output="result" />
	<Edge criticalPaths="[]" dst_node_id="137" dst_node_input="a" src_node_id="132" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="137" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeBits(96)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>[95:64]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>64</Base>
		<Width>32</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="138" dst_node_input="input" src_node_id="137" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="138" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="141" dst_node_input="i" src_node_id="138" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="141" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="o" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>NodeCast
{HWOffsetFix:32, 0, UNSIGNED} 
-&gt;
 {HWOffsetFix:32, 0, UNSIGNED}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector.cast(DFEVector.java:63)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:138)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="144" dst_node_input="i" src_node_id="141" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="144" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="5" name="o" type="dfeFloat(8, 24)" />
		<Text>NodeCast
{HWOffsetFix:32, 0, UNSIGNED} 
-&gt;
 {HWFloat:8, 24}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector.cast(DFEVector.java:63)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:182)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="150" dst_node_input="a" src_node_id="144" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="149" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>4.294967295E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.div(DFEVectorBase.java:1309)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:183)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>4.294967295E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="150" dst_node_input="b" src_node_id="149" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="150" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeDiv">
		<Input name="a" type="dfeFloat(8, 24)" />
		<Input name="b" type="dfeFloat(8, 24)" />
		<Output latency="28" name="result" type="dfeFloat(8, 24)" />
		<Text>/</Text>
		<ResourceUsage DSPs="0" FFs="896" FMems="0" LUTs="928" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.div(DFEVectorBase.java:1309)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:183)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="159" dst_node_input="input" src_node_id="150" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="159" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeFloat(8, 24)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="160" dst_node_input="in0" src_node_id="159" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="135" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeBits(96)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>[63:32]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>32</Base>
		<Width>32</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="136" dst_node_input="input" src_node_id="135" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="136" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="140" dst_node_input="i" src_node_id="136" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="140" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="o" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>NodeCast
{HWOffsetFix:32, 0, UNSIGNED} 
-&gt;
 {HWOffsetFix:32, 0, UNSIGNED}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector.cast(DFEVector.java:63)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:138)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="143" dst_node_input="i" src_node_id="140" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="143" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="5" name="o" type="dfeFloat(8, 24)" />
		<Text>NodeCast
{HWOffsetFix:32, 0, UNSIGNED} 
-&gt;
 {HWFloat:8, 24}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector.cast(DFEVector.java:63)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:182)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="148" dst_node_input="a" src_node_id="143" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="147" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>4.294967295E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.div(DFEVectorBase.java:1309)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:183)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>4.294967295E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="148" dst_node_input="b" src_node_id="147" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="148" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeDiv">
		<Input name="a" type="dfeFloat(8, 24)" />
		<Input name="b" type="dfeFloat(8, 24)" />
		<Output latency="28" name="result" type="dfeFloat(8, 24)" />
		<Text>/</Text>
		<ResourceUsage DSPs="0" FFs="896" FMems="0" LUTs="928" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.div(DFEVectorBase.java:1309)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:183)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="157" dst_node_input="input" src_node_id="148" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="157" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeFloat(8, 24)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="158" dst_node_input="in0" src_node_id="157" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="133" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeSlice">
		<Input name="a" type="dfeBits(96)" />
		<Output latency="0" name="result" type="dfeBits(32)" />
		<Text>[31:0]</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Base>0</Base>
		<Width>32</Width>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="134" dst_node_input="input" src_node_id="133" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="134" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeBits(32)" />
		<Output latency="0" name="output" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>&lt;{HWOffsetFix:32, 0, UNSIGNED}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:66)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:137)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="139" dst_node_input="i" src_node_id="134" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="139" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="0" name="o" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Text>NodeCast
{HWOffsetFix:32, 0, UNSIGNED} 
-&gt;
 {HWOffsetFix:32, 0, UNSIGNED}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector.cast(DFEVector.java:63)
maxpower.kernel.random.MersenneTwister.getRand(MersenneTwister.maxj:138)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:20)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="142" dst_node_input="i" src_node_id="139" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="142" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCast">
		<Input name="i" type="dfeOffsetFix(32, 0, UNSIGNED)" />
		<Output latency="5" name="o" type="dfeFloat(8, 24)" />
		<Text>NodeCast
{HWOffsetFix:32, 0, UNSIGNED} 
-&gt;
 {HWFloat:8, 24}</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector.cast(DFEVector.java:63)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:182)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="146" dst_node_input="a" src_node_id="142" src_node_output="o" />
	<Node criticalPaths="[]" group="[]" id="145" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>4.294967295E9</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.div(DFEVectorBase.java:1309)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:183)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>4.294967295E9</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="146" dst_node_input="b" src_node_id="145" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="146" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeDiv">
		<Input name="a" type="dfeFloat(8, 24)" />
		<Input name="b" type="dfeFloat(8, 24)" />
		<Output latency="28" name="result" type="dfeFloat(8, 24)" />
		<Text>/</Text>
		<ResourceUsage DSPs="0" FFs="896" FMems="0" LUTs="928" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.div(DFEVectorBase.java:1309)
maxpower.kernel.random.MersenneTwister.toFloat32(MersenneTwister.maxj:183)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:21)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="156" dst_node_input="input" src_node_id="146" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="156" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeReinterpret">
		<Input name="input" type="dfeFloat(8, 24)" />
		<Output latency="0" name="output" type="dfeBits(32)" />
		<Text>&lt;{HWRawBits:32}&gt;</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="158" dst_node_input="in1" src_node_id="156" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="158" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(32)" />
		<Input name="in1" type="dfeBits(32)" />
		<Output latency="0" name="result" type="dfeBits(64)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="160" dst_node_input="in1" src_node_id="158" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="160" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeCat">
		<Input name="in0" type="dfeBits(32)" />
		<Input name="in1" type="dfeBits(64)" />
		<Output latency="0" name="result" type="dfeBits(96)" />
		<Text>@</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="155" dst_node_input="data" src_node_id="160" src_node_output="result" />
	<Node criticalPaths="[]" group="[]" id="155" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeOutput">
		<Input name="output_control" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="data" type="dfeBits(96)" />
		<Text>Output(y)</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:24)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Name>y</Name>
	</Node>
	<Node criticalPaths="[]" group="[]" id="165" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantRawBits">
		<Output latency="0" name="value" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1</Value>
		<HexValue>0x1</HexValue>
		<NumericValue>1.0</NumericValue>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="166" dst_node_input="load" src_node_id="165" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="161" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantDouble">
		<Output latency="0" name="value" type="dfeUntypedConst()" />
		<Text>1.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1.0</Value>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="163" dst_node_input="enable" src_node_id="161" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="162" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantRawBits">
		<Output latency="0" name="value" type="dfeOffsetFix(49, 0, UNSIGNED)" />
		<Text>{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>1000000000000000000000000000000000000000000000000</Value>
		<HexValue>0x1000000000000</HexValue>
		<NumericValue>2.81474976710656E14</NumericValue>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="163" dst_node_input="max" src_node_id="162" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="163" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeCounter">
		<Input name="enable" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="max" type="dfeOffsetFix(49, 0, UNSIGNED)" />
		<Output latency="0" name="count" type="dfeOffsetFix(48, 0, UNSIGNED)" />
		<Output latency="0" name="wrap" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0</Text>
		<ResourceUsage DSPs="0" FFs="48" FMems="0" LUTs="48" />
		<OriginStackTrace>com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Increment>1</Increment>
		<WrapValue>0</WrapValue>
		<InitValue>0</InitValue>
		<CountMode>NUMERIC_INCREMENTING</CountMode>
		<WrapMode>COUNT_LT_MAX_THEN_WRAP</WrapMode>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="164" dst_node_input="input" src_node_id="163" src_node_output="count" />
	<Node criticalPaths="[]" group="[]" id="164" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeStreamOffset">
		<Input name="input" type="dfeOffsetFix(48, 0, UNSIGNED)" />
		<Output latency="1" name="output" type="dfeOffsetFix(48, 0, UNSIGNED)" />
		<Text>stream offset: 1</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="166" dst_node_input="data" src_node_id="164" src_node_output="output" />
	<Node criticalPaths="[]" group="[]" id="166" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeOutputMappedReg">
		<Input name="load" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Input name="data" type="dfeOffsetFix(48, 0, UNSIGNED)" />
		<Text>Scalar output (current_run_cycle_count)</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Name>current_run_cycle_count</Name>
	</Node>
	<Node criticalPaths="[]" group="[]" id="0" isControl="false" isVisible="true" pipelineFactor="1.0" powerUsage="N/A" type="NodeConstantRawBits">
		<Output latency="0" name="value" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.maxcompiler.v2.kernelcompiler.Flush.disabled(Flush.java:174)
rng.rngKernel.&lt;init&gt;(rngKernel.maxj:17)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
		<Value>0</Value>
		<HexValue>0x0</HexValue>
		<NumericValue>0.0</NumericValue>
	</Node>
	<Edge criticalPaths="[]" dst_node_id="170" dst_node_input="start" src_node_id="0" src_node_output="value" />
	<Node criticalPaths="[]" group="[]" id="170" isControl="false" isVisible="false" pipelineFactor="1.0" powerUsage="N/A" type="NodeFlush">
		<Input name="start" type="dfeOffsetFix(1, 0, UNSIGNED)" />
		<Text>flush on trigger</Text>
		<ResourceUsage DSPs="0" FFs="0" FMems="0" LUTs="0" />
		<OriginStackTrace>com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)
rng.rngManager.&lt;init&gt;(rngManager.maxj:17)
rng.rngManager.main(rngManager.maxj:33)</OriginStackTrace>
	</Node>
</Graph>
